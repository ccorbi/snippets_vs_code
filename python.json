{
    /*
        // Place your snippets for Python here. Each snippet is defined under a snippet name and has a prefix, body and 
        // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
        // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
        // same ids are connected.
        // Example:
        "Print to console": {
            "prefix": "log",
            "body":  [
                "console.log("$1");",
                "$2"
            ],
            "description": "Log output to console"
        }
    */
    "#!/usr/bin/env python": {
        "prefix": "env",
        "body":  ["#!/usr/bin/env python\n"],
        "description": ""
        },
    
    "# coding=utf-8": {
        "prefix": "enc",
        "body":  ["# coding=utf-8\n"],
        "description": ""
        },
    "Import": {
        "prefix": "im",
        "body":  ["import ${1:package/module}"],
        "description": ""
        },
    
    "From/Import": {
        "prefix": "fim",
        "body":  ["from ${1:package/module} import ${2:names}"],
        "description": ""
        },
    "Assert Equal": {
        "prefix": "ase",
        "body":  ["self.assertEqual(${1:expected}, ${2:actual}${3:, \"${4:message}\"})$0"],
        "description": ""
        },
    "Assert Not Equal": {
        "prefix": "asne",
        "body":  ["self.assertNotEqual(${1:expected}, ${2:actual}${3:, \"${4:message}\"})$0"],
        "description": ""
        },
    "Assert Raises": {
        "prefix": "asr",
        "body":  ["self.assertRaises(${1:exception}, ${2:callable})$0"],
        "description": ""
        },
    "Assert True": {
        "prefix": "ast",
        "body":  ["self.assertTrue(${1:actual}${2:, \"${3:message}\"})$0"],
        "description": ""
        },
    "Assert False": {
         "prefix": "asf",
         "body":  ["self.assertFalse(${1:actual}${2:, \"${3:message}\"})$0"],
         "description": ""
        },
    "Assert Is": {
         "prefix": "asi",
         "body":  ["self.assertIs(${1:expected}, ${2:actual}${3:, \"${4:message}\"})$0"],
         "description": ""
        },
    "Assert Is Not": {
         "prefix": "asint",
         "body":  ["self.assertIsNot(${1:expected}, ${2:actual}${3:, \"${4:message}\"})$0"],
         "description": ""
        },
    "Assert Is None": {
         "prefix": "asino",
         "body":  ["self.assertIsNone(${1:actual}${2:, \"${3:message}\"})$0"],
         "description": ""
    },
    "Assert Is Not None": {
        "prefix": "asinno",
        "body":  ["self.assertIsNotNone(${1:actual}${2:, \"${3:message}\"})$0"],
        "description": ""
        },
    "Assert In": {
         "prefix": "asin",
        "body":  ["self.assertIn(${1:needle}, ${2:haystack}${3:, \"${4:message}\"})$0"],
        "description": ""
        },
    "Assert Not In": {
        "prefix": "asni",
        "body":  ["self.assertNotIn(${1:needle}, ${2:haystack}${3:, \"${4:message}\"})$0"],
        "description": ""
        },
    "Assert": {
        "prefix": "as",
        "body":  ["self.assert_(${1:boolean expression}${2:, \"${3:message}\"})$0"],
        "description": ""
        },
    "Fail (a test)": {
        "prefix": "fail",
        "body":  ["self.fail(\"${1:message}\")$0"],
        "description": ""
        },
    "New Class": {
        "prefix": "class",
        "body":  ["class ${1:ClassName}(${2:object}):",
            "\t\"\"\"${3:docstring for $1.}\"\"\"",
            "\tdef __init__(self, ${4:arg}):",
            "\t\t${5:super($1, self).__init__()}",
            "\t\tself.arg = arg\n\t\t$0"],
        "description": ""
        },
    "New Method": {
        "prefix": "defs",
        "body":  ["def ${1:mname}(self, ${2:arg}):\n\t${3:pass}"],
        "description": ""
        },
    "New Function": {
        "prefix": "def",
        "body":  ["def ${1:fname}(${2:arg}):\n\t${3:pass}"],
        "description": ""
        },
    "New Property":{
        "prefix": "property",
        "body":  ["def ${1:foo}():\n    doc = "${2:The $1 property.}"\n    def fget(self):\n        ${3:return self._$1}\n    def fset(self, value):\n        ${4:self._$1 = value}\n    def fdel(self):\n        ${5:del self._$1}\n    return locals()\n$1 = property(**$1())$0"],
        "description": ""
        },
    "if": {
        "prefix": "if",
        "body":  ["if ${1:condition}:\n\t${2:pass}"],
        "description": ""
        },
    "for": {
        "prefix": "for",
        "body":  ["for ${1:value} in ${2:variable}:\n\t${3:pass}"],
        "description": ""
        },
    "while": {
        "prefix": "while",
        "body":  ["while ${1:condition}:\n\t${2:pass}"],
        "description": ""
        },
    "Try/Except/Else/Finally": {
        "prefix": "tryef",
        "body":  ["try:\n\t${1:pass}\nexcept${2: ${3:Exception} as ${4:e}}:\n\t${5:raise}\nelse:\n\t${6:pass}\nfinally:\n\t${7:pass}"],
        "description": ""
    },
    "Try/Except/Else": {
        "prefix": "trye",
        "body":  ["try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nelse:\n\t${5:pass}"],
        "description": ""
    },
    "Try/Except/Finally": {
        "prefix": "tryf",
        "body":  ["try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}\nfinally:\n\t${5:pass}"],
        "description": ""
        },
    "Try/Except": {
        "prefix": "try",
        "body":  ["try:\n\t${1:pass}\nexcept ${2:Exception} as ${3:e}:\n\t${4:raise $3}"],
        "description": ""
        },
    "List Comprehension": {
        "prefix": "lc",
        "body":  ["[${1:value} for ${2:value} in ${3:variable}]"],
        "description": ""
    },
    "List Comprehension If Else": {
        "prefix": "lcie",
        "body":  ["[${1:value} if ${2:condition} else ${3:condition} for ${4:value} in ${5:variable}]"],
        "description": ""
        },
    "Dictionary Comprehension": {
        "prefix": "dc",
        "body":  ["{${1:key}: ${2:value} for ${3:key}, ${4:value} in ${5:variable}}"],
        "description": ""
    },
    "PDB set trace": {
        "prefix": "pdb",
        "body":  ["import pdb; pdb.set_trace()"],
        "description": ""
        },
    "iPDB set trace": {
        "prefix": "ipdb",
        "body":  ["import ipdb; ipdb.set_trace()"],
        "description": ""
    },
    "rPDB set trace": {
        "prefix": "rpdb",
        "body":  ["import rpdb2; rpdb2.start_embedded_debugger(\"${1:debug_password}\")$0"]
    },
    "PuDB set trace": {
        "prefix": "pudb",
    "body":  ["import pudb; pudb.set_trace()"]
    },
    "__magic__": {
        "prefix": "__",
        "body":  ["__${1:init}__"]
    },
    "if __name__ == \"__main__\"": {
        "prefix": "ifmain",
        "body":  ["if __name__ == \"__main__\":\n\t${1:main()}$0"]
    },
    "open a file": {
        "prefix": "with",
        "body":  ["with open(filename,\"r\") as input_file:\n\tfor line in input_file:\n\t\ttab_data = line.split($0)"]
    },
    "docstring": {
        "prefix": "docstring",
        "body":  ["\"\"\"${1:One liner description}.\n\nParameters\n----------\n${2}\nReturns\n-------\n${3}\n\"\"\""],
        "description": ""
    },
    "self": {
        "prefix": ".",
        "body":  ["self."]
        }
    }